name: Build and Test macOS App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install PySide6

    - name: Create .spec file
      run: |
        echo """
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'PySide6.QtCore',
                'PySide6.QtWidgets',
                'PySide6.QtGui',
                'PySide6.QtDBus'
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='HelloWorld',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=True,
            target_arch='universal2',
            codesign_identity=None,
            entitlements_file=None,
        )
        
        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='HelloWorld'
        )
        """ > HelloWorld.spec

    - name: Create Info.plist
      run: |
        echo """<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HelloWorld</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.helloworld</string>
            <key>CFBundleName</key>
            <string>HelloWorld</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>CFBundleSupportedPlatforms</key>
            <array>
                <string>MacOSX</string>
            </array>
            <key>LSArchitecturePriority</key>
            <array>
                <string>arm64</string>
                <string>x86_64</string>
            </array>
        </dict>
        </plist>""" > Info.plist

    - name: Build App
      run: |
        # Build with more verbose output
        pyinstaller --clean -y HelloWorld.spec
        
        # Create app bundle structure
        mkdir -p "dist/HelloWorld.app/Contents/MacOS"
        mkdir -p "dist/HelloWorld.app/Contents/Resources"
        mkdir -p "dist/HelloWorld.app/Contents/Frameworks"
        
        # Copy files
        cp Info.plist "dist/HelloWorld.app/Contents/"
        cp -R "dist/HelloWorld/"* "dist/HelloWorld.app/Contents/MacOS/"
        
        # Set permissions
        chmod +x "dist/HelloWorld.app/Contents/MacOS/HelloWorld"

    - name: Create DMG
      run: |
        hdiutil create -volname "HelloWorld" -srcfolder "dist/HelloWorld.app" -ov -format UDZO "dist/HelloWorld.dmg"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: HelloWorld-macOS
        path: |
          dist/HelloWorld.dmg
          dist/HelloWorld.app

  test:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: HelloWorld-macOS
          path: download

      - name: Debug - List Directory Contents
        run: |
          echo "üìÅ Contents of download directory:"
          ls -la download
          echo "üì¶ DMG file details:"
          file download/HelloWorld.dmg || true

      - name: Verify DMG Integrity
        run: |
          echo "üîç Verifying DMG integrity..."
          if ! hdiutil verify download/HelloWorld.dmg; then
            echo "‚ùå DMG verification failed"
            exit 1
          fi
          echo "‚úÖ DMG integrity verified"

      - name: Check DMG Structure
        run: |
          echo "üìÄ Mounting DMG..."
          MOUNT_POINT=$(hdiutil attach -nobrowse -readonly download/HelloWorld.dmg | grep "Apple_HFS" | awk '{print $NF}')
          
          if [ -z "$MOUNT_POINT" ]; then
            echo "‚ùå Failed to mount DMG"
            exit 1
          fi
          
          echo "‚úÖ Mounted at: $MOUNT_POINT"
          
          echo "üì± Checking for .app bundle..."
          APP_PATH=$(find "$MOUNT_POINT" -name "*.app" -maxdepth 1)
          
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå No .app bundle found in DMG"
            hdiutil detach "$MOUNT_POINT"
            exit 1
          fi
          
          echo "‚úÖ Found app bundle: $(basename "$APP_PATH")"
          
          echo "üîç Verifying app bundle structure..."
          REQUIRED_PATHS=(
            "Contents/Info.plist"
            "Contents/MacOS"
            "Contents/MacOS/HelloWorld"
          )
          
          for path in "${REQUIRED_PATHS[@]}"; do
            if [ ! -e "$APP_PATH/$path" ]; then
              echo "‚ùå Missing required component: $path"
              hdiutil detach "$MOUNT_POINT"
              exit 1
            fi
          done
          
          echo "‚úÖ App bundle structure verified"
          
          echo "üìã Checking Info.plist..."
          REQUIRED_KEYS=(
            "CFBundleExecutable"
            "CFBundleIdentifier"
            "CFBundlePackageType"
            "LSMinimumSystemVersion"
          )
          
          for key in "${REQUIRED_KEYS[@]}"; do
            if ! defaults read "$APP_PATH/Contents/Info.plist" "$key" >/dev/null 2>&1; then
              echo "‚ùå Missing required Info.plist key: $key"
              hdiutil detach "$MOUNT_POINT"
              exit 1
            fi
          done
          
          echo "‚úÖ Info.plist verification passed"
          
          echo "üîß Checking executable..."
          EXEC_PATH="$APP_PATH/Contents/MacOS/HelloWorld"
          
          if [ ! -x "$EXEC_PATH" ]; then
            echo "‚ùå Executable permissions not set correctly"
            hdiutil detach "$MOUNT_POINT"
            exit 1
          fi
          
          echo "üìä Checking architecture support..."
          ARCHS=$(lipo -info "$EXEC_PATH")
          echo "$ARCHS"
          
          if ! echo "$ARCHS" | grep -q "x86_64" || ! echo "$ARCHS" | grep -q "arm64"; then
            echo "‚ùå Missing required architectures (should support both Intel and Apple Silicon)"
            hdiutil detach "$MOUNT_POINT"
            exit 1
          fi
          
          echo "‚úÖ Architecture verification passed"
          
          echo "üìö Checking dynamic libraries..."
          otool -L "$EXEC_PATH"
          
          echo "üß™ Checking Qt dependencies..."
          REQUIRED_QT_LIBS=(
            "QtCore"
            "QtGui"
            "QtWidgets"
          )
          
          OTOOL_OUTPUT=$(otool -L "$EXEC_PATH")
          for lib in "${REQUIRED_QT_LIBS[@]}"; do
            if ! echo "$OTOOL_OUTPUT" | grep -q "$lib"; then
              echo "‚ùå Missing required Qt library: $lib"
              hdiutil detach "$MOUNT_POINT"
              exit 1
            fi
          done
          
          echo "‚úÖ Qt dependencies verified"
          
          echo "üíø Unmounting DMG..."
          hdiutil detach "$MOUNT_POINT"
          
          echo "‚úÖ All verification checks passed!"

      - name: Smoke Test
        run: |
          echo "üß™ Performing smoke test..."
          
          # Mount DMG and copy to temporary location
          hdiutil attach download/HelloWorld.dmg
          TEST_DIR="$HOME/TestApp"
          mkdir -p "$TEST_DIR"
          cp -R "/Volumes/HelloWorld/HelloWorld.app" "$TEST_DIR/"
          hdiutil detach "/Volumes/HelloWorld"
          
          # Try launching the app
          echo "üì± Attempting to launch app..."
          open "$TEST_DIR/HelloWorld.app" &
          
          # Wait for app to start
          sleep 5
          
          # Check if process is running
          if pgrep -f "HelloWorld" > /dev/null; then
            echo "‚úÖ App launched successfully"
            # Capture any crash reports or errors
            log show --predicate 'processImagePath contains "HelloWorld"' --last 1m
            pkill -f "HelloWorld"
          else
            echo "‚ùå App failed to launch"
            echo "üìä System logs:"
            log show --predicate 'processImagePath contains "HelloWorld"' --last 1m
            exit 1
          fi
          
          # Cleanup
          rm -rf "$TEST_DIR"

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: download/HelloWorld.dmg
          name: Release ${{ github.ref_name }}
          body: |
            HelloWorld App Release ${{ github.ref_name }}
            - Universal binary (supports both Intel and M1 Macs)
            - Verified and tested for installation