name: Build and Test macOS App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install PySide6

    - name: Create .spec file
      run: |
        echo """
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'PySide6.QtCore',
                'PySide6.QtWidgets',
                'PySide6.QtGui',
                'PySide6.QtDBus'
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='HelloWorld',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=True,
            target_arch='universal2',
            codesign_identity=None,
            entitlements_file=None,
        )
        
        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='HelloWorld'
        )
        """ > HelloWorld.spec

    - name: Create Info.plist
      run: |
        echo """<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HelloWorld</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.helloworld</string>
            <key>CFBundleName</key>
            <string>HelloWorld</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>CFBundleSupportedPlatforms</key>
            <array>
                <string>MacOSX</string>
            </array>
            <key>LSArchitecturePriority</key>
            <array>
                <string>arm64</string>
                <string>x86_64</string>
            </array>
        </dict>
        </plist>""" > Info.plist

    - name: Build App
      run: |
        # Build with more verbose output
        pyinstaller --clean -y HelloWorld.spec
        
        # Create app bundle structure
        mkdir -p "dist/HelloWorld.app/Contents/MacOS"
        mkdir -p "dist/HelloWorld.app/Contents/Resources"
        mkdir -p "dist/HelloWorld.app/Contents/Frameworks"
        
        # Copy files
        cp Info.plist "dist/HelloWorld.app/Contents/"
        cp -R "dist/HelloWorld/"* "dist/HelloWorld.app/Contents/MacOS/"
        
        # Set permissions
        chmod +x "dist/HelloWorld.app/Contents/MacOS/HelloWorld"

    - name: Create DMG
      run: |
        hdiutil create -volname "HelloWorld" -srcfolder "dist/HelloWorld.app" -ov -format UDZO "dist/HelloWorld.dmg"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: HelloWorld-macOS
        path: |
          dist/HelloWorld.dmg
          dist/HelloWorld.app

  test:
    needs: build
    runs-on: macos-latest

    steps:
    - name: Download built artifacts
      uses: actions/download-artifact@v3
      with:
        name: HelloWorld-macOS
        path: download

    - name: Debug - List files
      run: |
        echo "Contents of download directory:"
        ls -la download
        echo "Contents of app bundle:"
        ls -la download/HelloWorld.app/Contents/MacOS || true

    - name: Test Installation
      run: |
        # Mount DMG
        hdiutil attach download/HelloWorld.dmg
        
        # Debug - Check app contents
        echo "Contents of mounted DMG:"
        ls -la "/Volumes/HelloWorld"
        echo "Contents of app bundle in DMG:"
        ls -la "/Volumes/HelloWorld/HelloWorld.app/Contents/MacOS"
        
        # Copy to Applications
        mkdir -p ~/Applications
        cp -R "/Volumes/HelloWorld/HelloWorld.app" ~/Applications/
        
        # Set permissions
        chmod +x ~/Applications/HelloWorld.app/Contents/MacOS/HelloWorld
        
        # Unmount DMG
        hdiutil detach "/Volumes/HelloWorld"
        
        # Try to run with debug output
        echo "üì± Attempting to launch app..."
        open ~/Applications/HelloWorld.app
        
        # Wait and check process
        sleep 5
        ps aux | grep HelloWorld
        
        # Check if running
        if pgrep -f "HelloWorld" > /dev/null; then
          echo "‚úÖ App launched successfully!"
        else
          echo "‚ùå App failed to launch"
          # Print logs if available
          echo "Application logs:"
          cat ~/Library/Logs/DiagnosticReports/HelloWorld_*.crash || true
          exit 1
        fi

    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        files: download/HelloWorld.dmg
        name: Release ${{ github.ref_name }}
        body: |
          HelloWorld App Release ${{ github.ref_name }}
          - Universal binary (supports both Intel and M1 Macs)