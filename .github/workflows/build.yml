name: Build and Test macOS App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install PySide6

    - name: Create .spec file
      run: |
        echo """
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'PySide6.QtCore',
                'PySide6.QtWidgets',
                'PySide6.QtGui',
                'PySide6.QtDBus'
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='HelloWorld',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=True,
            target_arch='universal2',
            codesign_identity=None,
            entitlements_file=None,
        )
        
        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='HelloWorld'
        )
        """ > HelloWorld.spec

    - name: Create Info.plist
      run: |
        echo """<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HelloWorld</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.helloworld</string>
            <key>CFBundleName</key>
            <string>HelloWorld</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>CFBundleSupportedPlatforms</key>
            <array>
                <string>MacOSX</string>
            </array>
            <key>LSArchitecturePriority</key>
            <array>
                <string>arm64</string>
                <string>x86_64</string>
            </array>
        </dict>
        </plist>""" > Info.plist

    - name: Build App
      run: |
        # Build with more verbose output
        pyinstaller --clean -y HelloWorld.spec
        
        # Create app bundle structure
        mkdir -p "dist/HelloWorld.app/Contents/MacOS"
        mkdir -p "dist/HelloWorld.app/Contents/Resources"
        mkdir -p "dist/HelloWorld.app/Contents/Frameworks"
        
        # Copy files
        cp Info.plist "dist/HelloWorld.app/Contents/"
        cp -R "dist/HelloWorld/"* "dist/HelloWorld.app/Contents/MacOS/"
        
        # Set permissions
        chmod +x "dist/HelloWorld.app/Contents/MacOS/HelloWorld"

    - name: Create DMG
      run: |
        hdiutil create -volname "HelloWorld" -srcfolder "dist/HelloWorld.app" -ov -format UDZO "dist/HelloWorld.dmg"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: HelloWorld-macOS
        path: |
          dist/HelloWorld.dmg
          dist/HelloWorld.app

  test:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: HelloWorld-macOS
          path: artifacts

      - name: Debug - List Downloads
        run: |
          echo "üìÅ Current working directory:"
          pwd
          echo "üìÅ Contents of artifacts directory:"
          ls -la artifacts
          echo "üîç DMG file details:"
          file artifacts/*.dmg || true
          echo "üìä DMG file size:"
          ls -lh artifacts/*.dmg || true

      - name: Verify DMG
        run: |
          DMG_PATH=$(find artifacts -name "*.dmg")
          if [ ! -f "$DMG_PATH" ]; then
            echo "‚ùå DMG file not found"
            exit 1
          fi

          echo "üîç DMG file details:"
          file "$DMG_PATH"

          echo "üìä Checking DMG integrity..."
          hdiutil verify "$DMG_PATH" || true

          echo "üíø Attempting to mount DMG..."
          hdiutil attach -verbose -nobrowse -readonly "$DMG_PATH" || {
            echo "‚ùå Mount failed. Checking system logs..."
            log show --predicate 'eventMessage contains "hdiutil"' --last 1m
            exit 1
          }

          # Get mount point
          MOUNT_POINT=$(hdiutil info | grep "/Volumes/HelloWorld" | awk '{print $NF}')
          if [ -z "$MOUNT_POINT" ]; then
            echo "‚ùå Could not find mount point"
            # Try alternative mount point detection
            MOUNT_POINT=$(df | grep "HelloWorld" | awk '{print $NF}')
            if [ -z "$MOUNT_POINT" ]; then
              echo "‚ùå Mount point detection failed"
              exit 1
            fi
          fi

          echo "‚úÖ Mounted at: $MOUNT_POINT"
          echo "üìÅ Mount point contents:"
          ls -la "$MOUNT_POINT"

          # Store mount point for later steps
          echo "MOUNT_POINT=$MOUNT_POINT" >> $GITHUB_ENV

          # Check for .app bundle
          if [ ! -d "$MOUNT_POINT/HelloWorld.app" ]; then
            echo "‚ùå HelloWorld.app not found in DMG"
            echo "üìÅ Available files in DMG:"
            find "$MOUNT_POINT" -ls
            hdiutil detach "$MOUNT_POINT" || true
            exit 1
          fi

          echo "‚úÖ Found HelloWorld.app"

      - name: Check App Bundle
        if: success()
        run: |
          if [ -z "$MOUNT_POINT" ]; then
            echo "‚ùå Mount point not set"
            exit 1
          fi

          APP_PATH="$MOUNT_POINT/HelloWorld.app"
          echo "üîç Checking app bundle at: $APP_PATH"

          # List app bundle contents
          echo "üìÅ App bundle structure:"
          find "$APP_PATH" -ls

          # Check Info.plist
          echo "üìã Info.plist contents:"
          plutil -p "$APP_PATH/Contents/Info.plist" || true

          # Check executable
          echo "üîß Checking executable:"
          EXEC_PATH="$APP_PATH/Contents/MacOS/HelloWorld"
          if [ -f "$EXEC_PATH" ]; then
            echo "‚úÖ Executable found"
            echo "üìä File permissions:"
            ls -la "$EXEC_PATH"
            echo "üìö Dynamic libraries:"
            otool -L "$EXEC_PATH" || true
          else
            echo "‚ùå Executable not found"
          fi

      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$MOUNT_POINT" ] && [ -d "$MOUNT_POINT" ]; then
            echo "üíø Unmounting DMG..."
            hdiutil detach "$MOUNT_POINT" -force || true
          fi